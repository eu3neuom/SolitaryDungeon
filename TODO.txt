1. Add corridor generators
2. Fix carpeala
 - add proper Health and TakeDamage
 - add proper Character proximity check
3. Eventualy move all spirte enum to their own file
4. Add music with beeps
OPTIONAL: Add Inner and Outer mode for room generation

PLANNED FEATURES:
 - items
 - multiple levels
 - procedural generation
 - music
 - colors

        private void GenerateHorizontalHallway(int Xorigin, int Yorigin, int Length, bool HasDoors)
        {
            for (int x = Xorigin + 1; x < Xorigin + Length; ++x)
            {
                map[Yorigin + 1, x] = new Wall(Wall.Sprite.Horizontal);
                map[Yorigin - 1, x] = new Wall(Wall.Sprite.Horizontal);
            }
            if(HasDoors)
            {
                map[Yorigin + 1, Xorigin] = new Wall(Wall.Sprite.InterRight);
                map[Yorigin - 1, Xorigin] = new Wall(Wall.Sprite.InterRight);
                map[Yorigin, Xorigin] = new Door(Door.Sprite.Vertical);
                map[Yorigin + 1, Xorigin + Length - 1] = new Wall(Wall.Sprite.InterLeft);
                map[Yorigin - 1, Xorigin + Length - 1] = new Wall(Wall.Sprite.InterLeft);
                map[Yorigin, Xorigin + Length - 1] = new Door(Door.Sprite.Vertical);
            }
            else
            {
                map[Yorigin + 1, Xorigin] = new Wall(Wall.Sprite.TopLeft);
                map[Yorigin - 1, Xorigin] = new Wall(Wall.Sprite.BotLeft);
                map[Yorigin, Xorigin] = Tile.Empty();
                map[Yorigin + 1, Xorigin + Length - 1] = new Wall(Wall.Sprite.TopRight);
                map[Yorigin - 1, Xorigin + Length - 1] = new Wall(Wall.Sprite.BotRight);
                map[Yorigin, Xorigin + Length - 1] = Tile.Empty();
            }
        }

        private void GenerateVerticalHallway(int Xorigin, int Yorigin, int Length, bool HasDoors)
        {
            for (int y = Yorigin + 1; y < Yorigin + Length; ++y)
            {
                map[y, Xorigin + 1] = new Wall(Wall.Sprite.Vertical);
                map[y, Xorigin - 1] = new Wall(Wall.Sprite.Vertical);
            }
            if (HasDoors)
            {
                map[Yorigin, Xorigin + 1] = new Wall(Wall.Sprite.InterBot);
                map[Yorigin, Xorigin - 1] = new Wall(Wall.Sprite.InterBot);
                map[Yorigin, Xorigin] = new Door(Door.Sprite.Horizontal);
                map[Yorigin + Length - 1, Xorigin + 1] = new Wall(Wall.Sprite.InterTop);
                map[Yorigin + Length - 1, Xorigin - 1] = new Wall(Wall.Sprite.InterTop);
                map[Yorigin + Length - 1, Xorigin] = new Door(Door.Sprite.Horizontal);
            }
            else
            {
                map[Yorigin, Xorigin + 1] = new Wall(Wall.Sprite.TopLeft);
                map[Yorigin, Xorigin - 1] = new Wall(Wall.Sprite.TopRight);
                map[Yorigin, Xorigin] = Tile.Empty();
                map[Yorigin + Length - 1, Xorigin + 1] = new Wall(Wall.Sprite.BotLeft);
                map[Yorigin + Length - 1, Xorigin - 1] = new Wall(Wall.Sprite.BotRight);
                map[Yorigin + Length - 1, Xorigin] = Tile.Empty();
            }
        }